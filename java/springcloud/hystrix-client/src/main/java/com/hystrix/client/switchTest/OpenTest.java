package com.hystrix.client.switchTest;

import com.netflix.config.ConfigurationManager;
import com.netflix.hystrix.HystrixCommand;
import com.netflix.hystrix.HystrixCommandGroupKey;
import com.netflix.hystrix.HystrixCommandProperties;

public class OpenTest {
    public static void main(String[] args) {
        //在10秒内，有大于10个请求发生，并且请求的错误率超过50%，则开启断路器。
        //10秒内有10个请求，满足第一个断路器开条件
        ConfigurationManager.getConfigInstance().setProperty(
                "hystrix.command.default.metrics.rollingStats.timeInMilliseconds", 10000
        );
        ConfigurationManager.getConfigInstance().setProperty(
                "hystrix.command.default.circuitBreaker.requestVolumeThreshold", 10
        );
        ConfigurationManager.getConfigInstance().setProperty(
                "hystrix.command.default.circuitBreaker.errorThresholdPercentage", 50
        );
        for (int i = 0; i < 15; i++){
            //循环执行15次命令请求
            MyCommand command = new MyCommand();
            command.execute();
            //断路器是否打开
            if (command.isCircuitBreakerOpen()){
                System.out.println("断路器被打开，执行第" + (i + 1) + "个命令");
            }
        }
    }

    static class MyCommand extends HystrixCommand<String> {
        //设置超时时间为500毫秒,模拟超时响应
        public MyCommand(){
            super(HystrixCommand.Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey("ExampleGroup"))
                    .andCommandPropertiesDefaults(HystrixCommandProperties.Setter()
                            .withExecutionTimeoutInMilliseconds(500))
            );
        }

        protected String run() throws Exception{
            //模拟超时
            Thread.sleep(800);
            return "";
        }

        @Override
        protected String getFallback() {
            return "";
        }
    }
}
